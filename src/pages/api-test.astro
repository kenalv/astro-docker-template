---
import Layout from '../layouts/Layout.astro';

// Backend configuration from environment variables
const backends = {
  wordpress: import.meta.env.WP_API_URL || 'http://localhost:8000/wp-json/wp/v2',
  node: import.meta.env.NODE_API_URL || 'http://localhost:3001/api',
  backend: import.meta.env.BACKEND_API_URL || 'http://localhost:8080/api'
};
---

<Layout title="API Connection Test">
  <main>
    <div class="container">
      <h1>üîå API Connection Tester</h1>
      <p>Test connectivity to your backend services</p>
      
      <div class="api-grid">
        <!-- WordPress API Test -->
        <div class="api-card">
          <h3>üìù WordPress API</h3>
          <p class="endpoint">{backends.wordpress}</p>
          <button class="test-btn" data-api="wordpress">Test Connection</button>
          <div class="result" data-result="wordpress" style="display: none;"></div>
        </div>

        <!-- Node.js API Test -->
        <div class="api-card">
          <h3>üü¢ Node.js API</h3>
          <p class="endpoint">{backends.node}</p>
          <button class="test-btn" data-api="node">Test Connection</button>
          <div class="result" data-result="node" style="display: none;"></div>
        </div>

        <!-- Backend API Test -->
        <div class="api-card">
          <h3>üîß Backend API</h3>
          <p class="endpoint">{backends.backend}</p>
          <button class="test-btn" data-api="backend">Test Connection</button>
          <div class="result" data-result="backend" style="display: none;"></div>
        </div>
      </div>

      <div class="info-section">
        <h2>‚ÑπÔ∏è Configuration Info</h2>
        <div class="config-grid">
          <div class="config-item">
            <strong>Environment:</strong> {import.meta.env.MODE}
          </div>
          <div class="config-item">
            <strong>Node Version:</strong> {import.meta.env.NODE_ENV || 'production'}
          </div>
        </div>
      </div>

      <div class="help-section">
        <h2>‚ùì Troubleshooting</h2>
        <ul>
          <li>Ensure backend services are running and accessible</li>
          <li>Check that environment variables are properly configured</li>
          <li>Verify CORS settings on your backend APIs</li>
          <li>For Docker: make sure containers can communicate</li>
        </ul>
      </div>
    </div>
  </main>
</Layout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  h1 {
    color: #2c3e50;
    margin-bottom: 1rem;
    text-align: center;
  }

  .api-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin: 2rem 0;
  }

  .api-card {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    border-left: 4px solid #3498db;
  }

  .api-card h3 {
    margin: 0 0 0.5rem 0;
    color: #2c3e50;
  }

  .endpoint {
    font-family: monospace;
    background: #f8f9fa;
    padding: 0.5rem;
    border-radius: 4px;
    font-size: 0.9rem;
    word-break: break-all;
    margin: 1rem 0;
  }

  .test-btn {
    background: #3498db;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s;
  }

  .test-btn:hover {
    background: #2980b9;
  }

  .test-btn:disabled {
    background: #bdc3c7;
    cursor: not-allowed;
  }

  .result {
    margin-top: 1rem;
    padding: 0.75rem;
    border-radius: 4px;
    font-weight: bold;
  }

  .result.success {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .result.error {
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }

  .info-section, .help-section {
    margin: 3rem 0;
    padding: 1.5rem;
    background: #f8f9fa;
    border-radius: 8px;
  }

  .config-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
  }

  .config-item {
    padding: 0.75rem;
    background: white;
    border-radius: 4px;
  }

  .help-section ul {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  .help-section li {
    margin: 0.5rem 0;
    line-height: 1.5;
  }

  @media (max-width: 768px) {
    .container {
      padding: 1rem;
    }
    
    .api-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }
</style>

<script>
  // API testing functionality with proper TypeScript support
  interface APIEndpoints {
    wordpress: string;
    node: string;
    backend: string;
  }

  const endpoints: APIEndpoints = {
    wordpress: "{backends.wordpress}",
    node: "{backends.node}",  
    backend: "{backends.backend}",
  };
  
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.test-btn').forEach((btnElement) => {
      const btn = btnElement as HTMLButtonElement;
      
      btn.addEventListener('click', async (e) => {
        const target = e.target as HTMLButtonElement;
        const api = target.dataset.api as keyof APIEndpoints;
        const result = document.querySelector(`[data-result="${api}"]`) as HTMLDivElement;
        const endpoint = endpoints[api];
        
        if (!result || !api || !endpoint) return;
        
        target.textContent = 'Testing...';
        target.disabled = true;
        result.style.display = 'none';
        
        try {
          const response = await fetch(endpoint);
          if (response.ok) {
            result.className = 'result success';
            result.textContent = `‚úÖ Connection successful! Status: ${response.status}`;
          } else {
            result.className = 'result error';
            result.textContent = `‚ùå Connection failed! Status: ${response.status}`;
          }
        } catch (error) {
          result.className = 'result error';
          const errorMessage = error instanceof Error ? error.message : 'Unknown error';
          result.textContent = `‚ùå Connection failed! Error: ${errorMessage}`;
        }
        
        result.style.display = 'block';
        target.textContent = 'Test Connection';
        target.disabled = false;
      });
    });
  });
</script>
